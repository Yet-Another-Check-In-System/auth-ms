// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid()) @db.Uuid
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  fullname       String
  firstname      String
  lastname       String
  email          String
  emailVerified  Boolean           @default(false)
  googleId       String
  microsoftId    String
  githubId       String
  password       String
  permissions    UserPermissions[]
  userUserGroups UserUserGroups[]
}

model UserGroup {
  id                   String                 @id @default(uuid()) @db.Uuid
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userUserGroups       UserUserGroups[]
  userGroupPermissions UserGroupPermissions[]
}

model Permission {
  id                   String                 @id @default(uuid()) @db.Uuid
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userPermissions      UserPermissions[]
  userGroupPermissions UserGroupPermissions[]
}

model UserPermissions {
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.Uuid
  assignedAt   DateTime   @default(now())
  assignedBy   String

  @@id([userId, permissionId])
}

model UserGroupPermissions {
  userGroup    UserGroup  @relation(fields: [userGroupId], references: [id])
  userGroupId  String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.Uuid
  assignedAt   DateTime   @default(now())
  assignedBy   String

  @@id([userGroupId, permissionId])
}

model UserUserGroups {
  User        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  UserGroup   UserGroup @relation(fields: [userGroupId], references: [id])
  userGroupId String    @db.Uuid

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, userGroupId])
}

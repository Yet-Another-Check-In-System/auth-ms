// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullname      String
  firstname     String
  lastname      String
  email         String
  emailVerified Boolean @default(false)

  password    String?
  googleId    String?
  microsoftId String?
  githubId    String?

  userUserGroups UserUserGroups[]
  tenantUsers    TenantUsers[]
}

model UserGroup {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  userUserGroups       UserUserGroups[]
  userGroupPermissions UserGroupPermissions[]
}

model Tenant {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  TenantUsers       TenantUsers[]
  TenantPermissions TenantPermissions[]
}

model Permission {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  userGroupPermissions UserGroupPermissions[]
  TenantPermissions    TenantPermissions[]
}

model UserGroupPermissions {
  userGroup    UserGroup  @relation(fields: [userGroupId], references: [id])
  userGroupId  String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.Uuid

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userGroupId, permissionId])
}

model TenantPermissions {
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  tenantId     String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.Uuid

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([tenantId, permissionId])
}

model UserUserGroups {
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id])
  userGroupId String    @db.Uuid

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, userGroupId])
}

model TenantUsers {
  User     User   @relation(fields: [userId], references: [id])
  userId   String @db.Uuid
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @db.Uuid

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, tenantId])
}
